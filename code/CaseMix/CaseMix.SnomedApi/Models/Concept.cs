// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SnomedApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Concept
    {
        /// <summary>
        /// Initializes a new instance of the Concept class.
        /// </summary>
        public Concept()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Concept class.
        /// </summary>
        public Concept(bool? active = default(bool?), IList<Description> activeDescriptions = default(IList<Description>), IList<ReferenceSetMember> allOwlAxiomMembers = default(IList<ReferenceSetMember>), IDictionary<string, object> associationTargets = default(IDictionary<string, object>), IList<Axiom> classAxioms = default(IList<Axiom>), string conceptId = default(string), string definitionStatus = default(string), string definitionStatusId = default(string), long? descendantCount = default(long?), IList<Description> descriptions = default(IList<Description>), string effectiveTime = default(string), int? effectiveTimeI = default(int?), System.DateTime? end = default(System.DateTime?), TermLangPojo fsn = default(TermLangPojo), IList<Axiom> gciAxioms = default(IList<Axiom>), string inactivationIndicator = default(string), string internalId = default(string), string moduleId = default(string), string path = default(string), bool? primitive = default(bool?), TermLangPojo pt = default(TermLangPojo), IList<Relationship> relationships = default(IList<Relationship>), string releaseHash = default(string), bool? released = default(bool?), int? releasedEffectiveTime = default(int?), System.DateTime? start = default(System.DateTime?))
        {
            Active = active;
            ActiveDescriptions = activeDescriptions;
            AllOwlAxiomMembers = allOwlAxiomMembers;
            AssociationTargets = associationTargets;
            ClassAxioms = classAxioms;
            ConceptId = conceptId;
            DefinitionStatus = definitionStatus;
            DefinitionStatusId = definitionStatusId;
            DescendantCount = descendantCount;
            Descriptions = descriptions;
            EffectiveTime = effectiveTime;
            EffectiveTimeI = effectiveTimeI;
            End = end;
            Fsn = fsn;
            GciAxioms = gciAxioms;
            InactivationIndicator = inactivationIndicator;
            InternalId = internalId;
            ModuleId = moduleId;
            Path = path;
            Primitive = primitive;
            Pt = pt;
            Relationships = relationships;
            ReleaseHash = releaseHash;
            Released = released;
            ReleasedEffectiveTime = releasedEffectiveTime;
            Start = start;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activeDescriptions")]
        public IList<Description> ActiveDescriptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allOwlAxiomMembers")]
        public IList<ReferenceSetMember> AllOwlAxiomMembers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "associationTargets")]
        public IDictionary<string, object> AssociationTargets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "classAxioms")]
        public IList<Axiom> ClassAxioms { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "conceptId")]
        public string ConceptId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "definitionStatus")]
        public string DefinitionStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "definitionStatusId")]
        public string DefinitionStatusId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "descendantCount")]
        public long? DescendantCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "descriptions")]
        public IList<Description> Descriptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveTime")]
        public string EffectiveTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveTimeI")]
        public int? EffectiveTimeI { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public System.DateTime? End { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fsn")]
        public TermLangPojo Fsn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gciAxioms")]
        public IList<Axiom> GciAxioms { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inactivationIndicator")]
        public string InactivationIndicator { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "internalId")]
        public string InternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "moduleId")]
        public string ModuleId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "primitive")]
        public bool? Primitive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pt")]
        public TermLangPojo Pt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relationships")]
        public IList<Relationship> Relationships { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "releaseHash")]
        public string ReleaseHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "released")]
        public bool? Released { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "releasedEffectiveTime")]
        public int? ReleasedEffectiveTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "start")]
        public System.DateTime? Start { get; set; }

    }
}

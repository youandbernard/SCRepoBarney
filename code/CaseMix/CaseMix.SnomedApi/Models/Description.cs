// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SnomedApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Description
    {
        /// <summary>
        /// Initializes a new instance of the Description class.
        /// </summary>
        public Description()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Description class.
        /// </summary>
        public Description(IDictionary<string, string> acceptabilityMap = default(IDictionary<string, string>), IDictionary<string, string> acceptabilityMapFromLangRefsetMembers = default(IDictionary<string, string>), bool? active = default(bool?), IDictionary<string, object> associationTargets = default(IDictionary<string, object>), string caseSignificance = default(string), string caseSignificanceId = default(string), string conceptId = default(string), string descriptionId = default(string), string effectiveTime = default(string), int? effectiveTimeI = default(int?), System.DateTime? end = default(System.DateTime?), string inactivationIndicator = default(string), string internalId = default(string), string lang = default(string), string languageCode = default(string), string moduleId = default(string), string path = default(string), string releaseHash = default(string), bool? released = default(bool?), int? releasedEffectiveTime = default(int?), System.DateTime? start = default(System.DateTime?), string tag = default(string), string term = default(string), string termFolded = default(string), int? termLen = default(int?), string type = default(string), string typeId = default(string))
        {
            AcceptabilityMap = acceptabilityMap;
            AcceptabilityMapFromLangRefsetMembers = acceptabilityMapFromLangRefsetMembers;
            Active = active;
            AssociationTargets = associationTargets;
            CaseSignificance = caseSignificance;
            CaseSignificanceId = caseSignificanceId;
            ConceptId = conceptId;
            DescriptionId = descriptionId;
            EffectiveTime = effectiveTime;
            EffectiveTimeI = effectiveTimeI;
            End = end;
            InactivationIndicator = inactivationIndicator;
            InternalId = internalId;
            Lang = lang;
            LanguageCode = languageCode;
            ModuleId = moduleId;
            Path = path;
            ReleaseHash = releaseHash;
            Released = released;
            ReleasedEffectiveTime = releasedEffectiveTime;
            Start = start;
            Tag = tag;
            Term = term;
            TermFolded = termFolded;
            TermLen = termLen;
            Type = type;
            TypeId = typeId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "acceptabilityMap")]
        public IDictionary<string, string> AcceptabilityMap { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "acceptabilityMapFromLangRefsetMembers")]
        public IDictionary<string, string> AcceptabilityMapFromLangRefsetMembers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "associationTargets")]
        public IDictionary<string, object> AssociationTargets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "caseSignificance")]
        public string CaseSignificance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "caseSignificanceId")]
        public string CaseSignificanceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "conceptId")]
        public string ConceptId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "descriptionId")]
        public string DescriptionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveTime")]
        public string EffectiveTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveTimeI")]
        public int? EffectiveTimeI { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public System.DateTime? End { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inactivationIndicator")]
        public string InactivationIndicator { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "internalId")]
        public string InternalId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lang")]
        public string Lang { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "moduleId")]
        public string ModuleId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "releaseHash")]
        public string ReleaseHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "released")]
        public bool? Released { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "releasedEffectiveTime")]
        public int? ReleasedEffectiveTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "start")]
        public System.DateTime? Start { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tag")]
        public string Tag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "term")]
        public string Term { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "termFolded")]
        public string TermFolded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "termLen")]
        public int? TermLen { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public string TypeId { get; set; }

    }
}

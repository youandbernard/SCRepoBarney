// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SnomedApi
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// SNOMED CT Terminology Server REST API
    /// </summary>
    public partial interface ISnowstorm : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Gets the IFindConceptsUsingGET.
        /// </summary>
        IFindConceptsUsingGET FindConceptsUsingGET { get; }

        /// <summary>
        /// Gets the IFindDescriptionsUsingGET.
        /// </summary>
        IFindDescriptionsUsingGET FindDescriptionsUsingGET { get; }

        /// <summary>
        /// Retrieve all branches
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Branch>>> RetrieveAllBranchesUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a single branch
        /// </summary>
        /// <param name='path'>
        /// path
        /// </param>
        /// <param name='includeInheritedMetadata'>
        /// includeInheritedMetadata
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BranchPojo>> RetrieveBranchUsingGETWithHttpMessagesAsync(string path, bool? includeInheritedMetadata = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve branch descendants
        /// </summary>
        /// <param name='path'>
        /// path
        /// </param>
        /// <param name='immediateChildren'>
        /// immediateChildren
        /// </param>
        /// <param name='page'>
        /// page
        /// </param>
        /// <param name='size'>
        /// size
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Branch>>> RetrieveBranchDescendantsUsingGETWithHttpMessagesAsync(string path, bool? immediateChildren = false, int? page = 0, int? size = 100, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Load concepts in the browser format.
        /// </summary>
        /// <remarks>
        /// When enabled 'searchAfter' can be used for unlimited pagination.
        /// Load the first page then take the 'searchAfter' value from the
        /// response and use that as a parameter in the next page request
        /// instead of 'number'.
        /// </remarks>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='conceptIds'>
        /// conceptIds
        /// </param>
        /// <param name='number'>
        /// number
        /// </param>
        /// <param name='size'>
        /// size
        /// </param>
        /// <param name='searchAfter'>
        /// searchAfter
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageConcept>> GetBrowserConceptsUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, IList<long?> conceptIds = default(IList<long?>), int? number = 0, int? size = 100, string searchAfter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetch the status of a bulk concept creation or update.
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='bulkChangeId'>
        /// bulkChangeId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AsyncConceptChangeBatch>> GetConceptBulkChangeUsingGETWithHttpMessagesAsync(string branch, string bulkChangeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Load a concept in the browser format.
        /// </summary>
        /// <remarks>
        /// During content authoring previous versions of the concept can be
        /// loaded from version control.
        /// To do this use the branch path format
        /// {branch@yyyy-MM-ddTHH:mm:ss.SSSZ} or {branch@epoch_milliseconds}.
        /// The version of the concept when the branch was created can be
        /// loaded using {branch@-}.
        /// </remarks>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='descendantCountForm'>
        /// If this parameter is set a descendantCount will be included in the
        /// response using stated/inferred as requested. Possible values
        /// include: 'inferred', 'stated', 'additional'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConceptView>> FindBrowserConceptUsingGETWithHttpMessagesAsync(string branch, string conceptId, string acceptLanguage, string descendantCountForm = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findConceptAncestors
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='form'>
        /// form. Possible values include: 'inferred', 'stated', 'additional'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> FindConceptAncestorsUsingGETWithHttpMessagesAsync(string branch, string conceptId, string acceptLanguage, string form = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findConceptChildren
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='form'>
        /// form. Possible values include: 'inferred', 'stated', 'additional'
        /// </param>
        /// <param name='includeDescendantCount'>
        /// includeDescendantCount
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> FindConceptChildrenUsingGETWithHttpMessagesAsync(string branch, string conceptId, string acceptLanguage, string form = default(string), bool? includeDescendantCount = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findConceptParents
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='form'>
        /// form. Possible values include: 'inferred', 'stated', 'additional'
        /// </param>
        /// <param name='includeDescendantCount'>
        /// includeDescendantCount
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> FindConceptParentsUsingGETWithHttpMessagesAsync(string branch, string conceptId, string acceptLanguage, string form = default(string), bool? includeDescendantCount = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search for concept descriptions.
        /// </summary>
        /// <remarks>
        /// The Accept-Language header is used to specify the user's preferred
        /// language, 'en' is always added as a fallback if not already
        /// included in the list. Each language is used as an optional clause
        /// for matching and will include the correct character folding
        /// behaviour for that language. The Accept-Language header list is
        /// also used to chose the best translated FSN and PT values in the
        /// response.
        /// </remarks>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='term'>
        /// term
        /// </param>
        /// <param name='active'>
        /// active
        /// </param>
        /// <param name='module'>
        /// module
        /// </param>
        /// <param name='language'>
        /// Set of two character language codes to match. The English language
        /// code 'en' will not be added automatically, in contrast to the
        /// Accept-Language header which always includes it. Accept-Language
        /// header still controls result FSN and PT language selection.
        /// </param>
        /// <param name='type'>
        /// Set of description types to include. Pick descendants of
        /// '900000000000446008 | Description type (core metadata concept) |'.
        /// </param>
        /// <param name='semanticTag'>
        /// semanticTag
        /// </param>
        /// <param name='semanticTags'>
        /// Set of semantic tags.
        /// </param>
        /// <param name='preferredIn'>
        /// Set of description language reference sets. The description must be
        /// preferred in at least one of these to match.
        /// </param>
        /// <param name='acceptableIn'>
        /// Set of description language reference sets. The description must be
        /// acceptable in at least one of these to match.
        /// </param>
        /// <param name='preferredOrAcceptableIn'>
        /// Set of description language reference sets. The description must be
        /// preferred OR acceptable in at least one of these to match.
        /// </param>
        /// <param name='conceptActive'>
        /// conceptActive
        /// </param>
        /// <param name='conceptRefset'>
        /// conceptRefset
        /// </param>
        /// <param name='groupByConcept'>
        /// groupByConcept
        /// </param>
        /// <param name='searchMode'>
        /// searchMode. Possible values include: 'STANDARD', 'REGEX'
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='limit'>
        /// limit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PageBrowserDescriptionSearchResult>> FindBrowserDescriptionsUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, string term = default(string), bool? active = default(bool?), string module = default(string), IList<string> language = default(IList<string>), IList<long?> type = default(IList<long?>), string semanticTag = default(string), IList<string> semanticTags = default(IList<string>), IList<long?> preferredIn = default(IList<long?>), IList<long?> acceptableIn = default(IList<long?>), IList<long?> preferredOrAcceptableIn = default(IList<long?>), bool? conceptActive = default(bool?), string conceptRefset = default(string), bool? groupByConcept = false, string searchMode = default(string), int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search for reference set ids.
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='referenceSet'>
        /// A reference set identifier or ECL expression can be used to limit
        /// the reference sets searched. Example: &lt;723564002
        /// </param>
        /// <param name='referencedComponentId'>
        /// referencedComponentId
        /// </param>
        /// <param name='active'>
        /// active
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='limit'>
        /// limit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RefSetMemberPageWithBucketAggregationsReferenceSetMember>> FindBrowserReferenceSetMembersWithAggregationsUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, string referenceSet = default(string), string referencedComponentId = default(string), bool? active = default(bool?), int? offset = 0, int? limit = 10, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all code systems
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageCodeSystem>> FindAllUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a code system
        /// </summary>
        /// <param name='shortName'>
        /// shortName
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CodeSystem>> FindCodeSystemUsingGETWithHttpMessagesAsync(string shortName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all code system versions
        /// </summary>
        /// <param name='shortName'>
        /// shortName
        /// </param>
        /// <param name='showFutureVersions'>
        /// showFutureVersions
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageCodeSystemVersion>> FindAllVersionsUsingGETWithHttpMessagesAsync(string shortName, bool? showFutureVersions = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve valid values for the given attribute and term prefix.
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='attributeId'>
        /// attributeId
        /// </param>
        /// <param name='termPrefix'>
        /// termPrefix
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='contentType'>
        /// contentType. Possible values include: 'PRECOORDINATED',
        /// 'NEW_PRECOORDINATED', 'POSTCOORDINATED', 'ALL'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageConceptMini>> RetrieveAttributeValuesUsingGETWithHttpMessagesAsync(string branch, string attributeId, string termPrefix, string acceptLanguage, string contentType = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve MRCM domain attributes applicable for the given stated
        /// parents.
        /// </summary>
        /// <remarks>
        /// The parentIds must be the set ids of stated parents. If creating
        /// post-coordinated expressions be sure to set the content type to
        /// POSTCOORDINATED.
        /// </remarks>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='parentIds'>
        /// parentIds
        /// </param>
        /// <param name='proximalPrimitiveModeling'>
        /// proximalPrimitiveModeling
        /// </param>
        /// <param name='contentType'>
        /// contentType. Possible values include: 'PRECOORDINATED',
        /// 'NEW_PRECOORDINATED', 'POSTCOORDINATED', 'ALL'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageConceptMini>> RetrieveDomainAttributesUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, IList<long?> parentIds = default(IList<long?>), bool? proximalPrimitiveModeling = true, string contentType = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Software build version and timestamp.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BuildVersion>> GetBuildInformationUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Calculate statistics for unreleased/unversioned content to be used
        /// in daily build browser.
        /// </summary>
        /// <remarks>
        /// Does not work on versioned content.
        /// </remarks>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AuthoringStatsSummary>> GetStatsUsingGETWithHttpMessagesAsync(string branch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getChangedFSNs
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConceptMicro>>> GetChangedFSNsUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getInactivatedConcepts
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConceptMicro>>> GetInactivatedConceptsUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getInactivatedSynonyms
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConceptMicro>>> GetInactivatedSynonymsUsingGETWithHttpMessagesAsync(string branch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getNewConcepts
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConceptMicro>>> GetNewConceptsUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getNewSynonymsOnExistingConcepts
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConceptMicro>>> GetNewSynonymsOnExistingConceptsUsingGETWithHttpMessagesAsync(string branch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getReactivatedConcepts
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConceptMicro>>> GetReactivatedConceptsUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getReactivatedSynonyms
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConceptMicro>>> GetReactivatedSynonymsUsingGETWithHttpMessagesAsync(string branch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findConcepts
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='activeFilter'>
        /// activeFilter
        /// </param>
        /// <param name='definitionStatusFilter'>
        /// definitionStatusFilter
        /// </param>
        /// <param name='term'>
        /// term
        /// </param>
        /// <param name='termActive'>
        /// termActive
        /// </param>
        /// <param name='language'>
        /// Set of two character language codes to match. The English language
        /// code 'en' will not be added automatically, in contrast to the
        /// Accept-Language header which always includes it. Accept-Language
        /// header still controls result FSN and PT language selection.
        /// </param>
        /// <param name='preferredIn'>
        /// Set of description language reference sets. The description must be
        /// preferred in at least one of these to match.
        /// </param>
        /// <param name='acceptableIn'>
        /// Set of description language reference sets. The description must be
        /// acceptable in at least one of these to match.
        /// </param>
        /// <param name='preferredOrAcceptableIn'>
        /// Set of description language reference sets. The description must be
        /// preferred OR acceptable in at least one of these to match.
        /// </param>
        /// <param name='ecl'>
        /// ecl
        /// </param>
        /// <param name='statedEcl'>
        /// statedEcl
        /// </param>
        /// <param name='conceptIds'>
        /// conceptIds
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='limit'>
        /// limit
        /// </param>
        /// <param name='searchAfter'>
        /// searchAfter
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language header can take the format en-x-900000000000508004
        /// which sets the language reference set to use in the results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageConceptMini>> FindConceptsUsingGETMethodWithHttpMessagesAsync(string branch, bool? activeFilter = default(bool?), string definitionStatusFilter = default(string), string term = default(string), bool? termActive = default(bool?), IList<string> language = default(IList<string>), IList<long?> preferredIn = default(IList<long?>), IList<long?> acceptableIn = default(IList<long?>), IList<long?> preferredOrAcceptableIn = default(IList<long?>), string ecl = default(string), string statedEcl = default(string), IList<string> conceptIds = default(IList<string>), int? offset = 0, int? limit = 50, string searchAfter = default(string), string acceptLanguage = "en", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findConcept
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConceptMini>> FindConceptUsingGETWithHttpMessagesAsync(string branch, string conceptId, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getConceptAuthoringForm
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Expression>> GetConceptAuthoringFormUsingGETWithHttpMessagesAsync(string branch, string conceptId, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findConceptDescendants
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='stated'>
        /// stated
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='limit'>
        /// limit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageConceptMini>> FindConceptDescendantsUsingGETWithHttpMessagesAsync(string branch, string conceptId, string acceptLanguage, bool? stated = false, int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findConceptDescriptions
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConceptDescriptionsResult>> FindConceptDescriptionsUsingGETWithHttpMessagesAsync(string branch, string conceptId, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findConceptInboundRelationships
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<InboundRelationshipsResult>> FindConceptInboundRelationshipsUsingGETWithHttpMessagesAsync(string branch, string conceptId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getConceptNormalForm
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='statedView'>
        /// statedView
        /// </param>
        /// <param name='includeTerms'>
        /// includeTerms
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ExpressionStringPojo>> GetConceptNormalFormUsingGETWithHttpMessagesAsync(string branch, string conceptId, string acceptLanguage, bool? statedView = false, bool? includeTerms = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find concepts which reference this concept in the inferred or
        /// stated form (including stated axioms).
        /// </summary>
        /// <remarks>
        /// Pagination works on the referencing concepts. A referencing concept
        /// may have one or more references of different types.
        /// </remarks>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptId'>
        /// conceptId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='stated'>
        /// stated
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='limit'>
        /// limit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConceptReferencesResult>> FindConceptReferencesUsingGETWithHttpMessagesAsync(string branch, long conceptId, string acceptLanguage, bool? stated = false, int? offset = 0, int? limit = 1000, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findDescriptions
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='concept'>
        /// The concept id to match
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='limit'>
        /// limit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageDescription>> FindDescriptionsUsingGETMethodWithHttpMessagesAsync(string branch, string concept = default(string), int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List semantic tags of all active concepts together with a count of
        /// concepts using each.
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IDictionary<string, long?>>> CountSemanticTagsUsingGETWithHttpMessagesAsync(string branch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// fetchDescription
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='descriptionId'>
        /// descriptionId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Description>> FetchDescriptionUsingGETWithHttpMessagesAsync(string branch, string descriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search for reference set members.
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='referenceSet'>
        /// A reference set identifier or ECL expression can be used to limit
        /// the reference sets searched. Example: &lt;723564002
        /// </param>
        /// <param name='referencedComponentId'>
        /// referencedComponentId
        /// </param>
        /// <param name='active'>
        /// active
        /// </param>
        /// <param name='targetComponent'>
        /// targetComponent
        /// </param>
        /// <param name='mapTarget'>
        /// mapTarget
        /// </param>
        /// <param name='owlExpressionconceptId'>
        /// Search by concept identifiers within an owlExpression.
        /// </param>
        /// <param name='owlExpressiongci'>
        /// Return axiom members with a GCI owlExpression.
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='limit'>
        /// limit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageReferenceSetMember>> FindRefsetMembersUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, string referenceSet = default(string), string referencedComponentId = default(string), bool? active = default(bool?), string targetComponent = default(string), string mapTarget = default(string), string owlExpressionconceptId = default(string), bool? owlExpressiongci = default(bool?), int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// fetchMember
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='uuid'>
        /// uuid
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ReferenceSetMember>> FetchMemberUsingGETWithHttpMessagesAsync(string branch, string uuid, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// findRelationships
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='active'>
        /// active
        /// </param>
        /// <param name='module'>
        /// module
        /// </param>
        /// <param name='effectiveTime'>
        /// effectiveTime
        /// </param>
        /// <param name='source'>
        /// source
        /// </param>
        /// <param name='type'>
        /// type
        /// </param>
        /// <param name='destination'>
        /// destination
        /// </param>
        /// <param name='characteristicType'>
        /// characteristicType. Possible values include: 'STATED_RELATIONSHIP',
        /// 'INFERRED_RELATIONSHIP', 'ADDITIONAL_RELATIONSHIP'
        /// </param>
        /// <param name='group'>
        /// group
        /// </param>
        /// <param name='offset'>
        /// offset
        /// </param>
        /// <param name='limit'>
        /// limit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemsPageRelationship>> FindRelationshipsUsingGETWithHttpMessagesAsync(string branch, string acceptLanguage, bool? active = default(bool?), string module = default(string), string effectiveTime = default(string), string source = default(string), string type = default(string), string destination = default(string), string characteristicType = default(string), int? group = default(int?), int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// fetchRelationship
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='relationshipId'>
        /// relationshipId
        /// </param>
        /// <param name='acceptLanguage'>
        /// Accept-Language
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Relationship>> FetchRelationshipUsingGETWithHttpMessagesAsync(string branch, string relationshipId, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find inactive concepts with no historical association grouped by
        /// inactivation type.
        /// </summary>
        /// <param name='branch'>
        /// branch
        /// </param>
        /// <param name='conceptEffectiveTime'>
        /// conceptEffectiveTime
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<InactivationTypeAndConceptIdList>>> FindInactiveConceptsWithNoHistoricalAssociationByInactivationTypeUsingGETWithHttpMessagesAsync(string branch, string conceptEffectiveTime = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}

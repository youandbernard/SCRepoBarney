// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SnomedApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FindConceptsUsingGET.
    /// </summary>
    public static partial class FindConceptsUsingGETExtensions
    {
            /// <summary>
            /// Search concepts across multiple Code Systems.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='conceptIds'>
            /// conceptIds
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            public static ItemsPageConceptMini One(this IFindConceptsUsingGET operations, string acceptLanguage, IList<string> conceptIds = default(IList<string>), bool? active = default(bool?), int? offset = 0, int? limit = 50)
            {
                return operations.OneAsync(acceptLanguage, conceptIds, active, offset, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search concepts across multiple Code Systems.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='conceptIds'>
            /// conceptIds
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageConceptMini> OneAsync(this IFindConceptsUsingGET operations, string acceptLanguage, IList<string> conceptIds = default(IList<string>), bool? active = default(bool?), int? offset = 0, int? limit = 50, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OneWithHttpMessagesAsync(acceptLanguage, conceptIds, active, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search concepts across multiple Code Systems.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='conceptIds'>
            /// conceptIds
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageConceptMini> OneWithHttpMessages(this IFindConceptsUsingGET operations, string acceptLanguage, IList<string> conceptIds = default(IList<string>), bool? active = default(bool?), int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.OneWithHttpMessagesAsync(acceptLanguage, conceptIds, active, offset, limit, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}

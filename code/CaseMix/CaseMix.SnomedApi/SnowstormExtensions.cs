// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SnomedApi
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Snowstorm.
    /// </summary>
    public static partial class SnowstormExtensions
    {
            /// <summary>
            /// Retrieve all branches
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Branch> RetrieveAllBranchesUsingGET(this ISnowstorm operations)
            {
                return operations.RetrieveAllBranchesUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all branches
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Branch>> RetrieveAllBranchesUsingGETAsync(this ISnowstorm operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveAllBranchesUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all branches
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<Branch>> RetrieveAllBranchesUsingGETWithHttpMessages(this ISnowstorm operations, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.RetrieveAllBranchesUsingGETWithHttpMessagesAsync(customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a single branch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// path
            /// </param>
            /// <param name='includeInheritedMetadata'>
            /// includeInheritedMetadata
            /// </param>
            public static BranchPojo RetrieveBranchUsingGET(this ISnowstorm operations, string path, bool? includeInheritedMetadata = false)
            {
                return operations.RetrieveBranchUsingGETAsync(path, includeInheritedMetadata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a single branch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// path
            /// </param>
            /// <param name='includeInheritedMetadata'>
            /// includeInheritedMetadata
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BranchPojo> RetrieveBranchUsingGETAsync(this ISnowstorm operations, string path, bool? includeInheritedMetadata = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveBranchUsingGETWithHttpMessagesAsync(path, includeInheritedMetadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a single branch
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// path
            /// </param>
            /// <param name='includeInheritedMetadata'>
            /// includeInheritedMetadata
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<BranchPojo> RetrieveBranchUsingGETWithHttpMessages(this ISnowstorm operations, string path, bool? includeInheritedMetadata = false, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.RetrieveBranchUsingGETWithHttpMessagesAsync(path, includeInheritedMetadata, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve branch descendants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// path
            /// </param>
            /// <param name='immediateChildren'>
            /// immediateChildren
            /// </param>
            /// <param name='page'>
            /// page
            /// </param>
            /// <param name='size'>
            /// size
            /// </param>
            public static IList<Branch> RetrieveBranchDescendantsUsingGET(this ISnowstorm operations, string path, bool? immediateChildren = false, int? page = 0, int? size = 100)
            {
                return operations.RetrieveBranchDescendantsUsingGETAsync(path, immediateChildren, page, size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve branch descendants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// path
            /// </param>
            /// <param name='immediateChildren'>
            /// immediateChildren
            /// </param>
            /// <param name='page'>
            /// page
            /// </param>
            /// <param name='size'>
            /// size
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Branch>> RetrieveBranchDescendantsUsingGETAsync(this ISnowstorm operations, string path, bool? immediateChildren = false, int? page = 0, int? size = 100, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveBranchDescendantsUsingGETWithHttpMessagesAsync(path, immediateChildren, page, size, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve branch descendants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// path
            /// </param>
            /// <param name='immediateChildren'>
            /// immediateChildren
            /// </param>
            /// <param name='page'>
            /// page
            /// </param>
            /// <param name='size'>
            /// size
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<Branch>> RetrieveBranchDescendantsUsingGETWithHttpMessages(this ISnowstorm operations, string path, bool? immediateChildren = false, int? page = 0, int? size = 100, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.RetrieveBranchDescendantsUsingGETWithHttpMessagesAsync(path, immediateChildren, page, size, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Load concepts in the browser format.
            /// </summary>
            /// <remarks>
            /// When enabled 'searchAfter' can be used for unlimited pagination. Load the
            /// first page then take the 'searchAfter' value from the response and use that
            /// as a parameter in the next page request instead of 'number'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='conceptIds'>
            /// conceptIds
            /// </param>
            /// <param name='number'>
            /// number
            /// </param>
            /// <param name='size'>
            /// size
            /// </param>
            /// <param name='searchAfter'>
            /// searchAfter
            /// </param>
            public static ItemsPageConcept GetBrowserConceptsUsingGET(this ISnowstorm operations, string branch, string acceptLanguage, IList<long?> conceptIds = default(IList<long?>), int? number = 0, int? size = 100, string searchAfter = default(string))
            {
                return operations.GetBrowserConceptsUsingGETAsync(branch, acceptLanguage, conceptIds, number, size, searchAfter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Load concepts in the browser format.
            /// </summary>
            /// <remarks>
            /// When enabled 'searchAfter' can be used for unlimited pagination. Load the
            /// first page then take the 'searchAfter' value from the response and use that
            /// as a parameter in the next page request instead of 'number'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='conceptIds'>
            /// conceptIds
            /// </param>
            /// <param name='number'>
            /// number
            /// </param>
            /// <param name='size'>
            /// size
            /// </param>
            /// <param name='searchAfter'>
            /// searchAfter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageConcept> GetBrowserConceptsUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, IList<long?> conceptIds = default(IList<long?>), int? number = 0, int? size = 100, string searchAfter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBrowserConceptsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, conceptIds, number, size, searchAfter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Load concepts in the browser format.
            /// </summary>
            /// <remarks>
            /// When enabled 'searchAfter' can be used for unlimited pagination. Load the
            /// first page then take the 'searchAfter' value from the response and use that
            /// as a parameter in the next page request instead of 'number'.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='conceptIds'>
            /// conceptIds
            /// </param>
            /// <param name='number'>
            /// number
            /// </param>
            /// <param name='size'>
            /// size
            /// </param>
            /// <param name='searchAfter'>
            /// searchAfter
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageConcept> GetBrowserConceptsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, IList<long?> conceptIds = default(IList<long?>), int? number = 0, int? size = 100, string searchAfter = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetBrowserConceptsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, conceptIds, number, size, searchAfter, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch the status of a bulk concept creation or update.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='bulkChangeId'>
            /// bulkChangeId
            /// </param>
            public static AsyncConceptChangeBatch GetConceptBulkChangeUsingGET(this ISnowstorm operations, string branch, string bulkChangeId)
            {
                return operations.GetConceptBulkChangeUsingGETAsync(branch, bulkChangeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch the status of a bulk concept creation or update.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='bulkChangeId'>
            /// bulkChangeId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AsyncConceptChangeBatch> GetConceptBulkChangeUsingGETAsync(this ISnowstorm operations, string branch, string bulkChangeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConceptBulkChangeUsingGETWithHttpMessagesAsync(branch, bulkChangeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch the status of a bulk concept creation or update.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='bulkChangeId'>
            /// bulkChangeId
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<AsyncConceptChangeBatch> GetConceptBulkChangeUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string bulkChangeId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetConceptBulkChangeUsingGETWithHttpMessagesAsync(branch, bulkChangeId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Load a concept in the browser format.
            /// </summary>
            /// <remarks>
            /// During content authoring previous versions of the concept can be loaded
            /// from version control.
            /// To do this use the branch path format {branch@yyyy-MM-ddTHH:mm:ss.SSSZ} or
            /// {branch@epoch_milliseconds}.
            /// The version of the concept when the branch was created can be loaded using
            /// {branch@-}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='descendantCountForm'>
            /// If this parameter is set a descendantCount will be included in the response
            /// using stated/inferred as requested. Possible values include: 'inferred',
            /// 'stated', 'additional'
            /// </param>
            public static ConceptView FindBrowserConceptUsingGET(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string descendantCountForm = default(string))
            {
                return operations.FindBrowserConceptUsingGETAsync(branch, conceptId, acceptLanguage, descendantCountForm).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Load a concept in the browser format.
            /// </summary>
            /// <remarks>
            /// During content authoring previous versions of the concept can be loaded
            /// from version control.
            /// To do this use the branch path format {branch@yyyy-MM-ddTHH:mm:ss.SSSZ} or
            /// {branch@epoch_milliseconds}.
            /// The version of the concept when the branch was created can be loaded using
            /// {branch@-}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='descendantCountForm'>
            /// If this parameter is set a descendantCount will be included in the response
            /// using stated/inferred as requested. Possible values include: 'inferred',
            /// 'stated', 'additional'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConceptView> FindBrowserConceptUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string descendantCountForm = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindBrowserConceptUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, descendantCountForm, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Load a concept in the browser format.
            /// </summary>
            /// <remarks>
            /// During content authoring previous versions of the concept can be loaded
            /// from version control.
            /// To do this use the branch path format {branch@yyyy-MM-ddTHH:mm:ss.SSSZ} or
            /// {branch@epoch_milliseconds}.
            /// The version of the concept when the branch was created can be loaded using
            /// {branch@-}.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='descendantCountForm'>
            /// If this parameter is set a descendantCount will be included in the response
            /// using stated/inferred as requested. Possible values include: 'inferred',
            /// 'stated', 'additional'
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ConceptView> FindBrowserConceptUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string descendantCountForm = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindBrowserConceptUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, descendantCountForm, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptAncestors
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='form'>
            /// form. Possible values include: 'inferred', 'stated', 'additional'
            /// </param>
            public static object FindConceptAncestorsUsingGET(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string form = default(string))
            {
                return operations.FindConceptAncestorsUsingGETAsync(branch, conceptId, acceptLanguage, form).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptAncestors
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='form'>
            /// form. Possible values include: 'inferred', 'stated', 'additional'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FindConceptAncestorsUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string form = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindConceptAncestorsUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, form, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findConceptAncestors
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='form'>
            /// form. Possible values include: 'inferred', 'stated', 'additional'
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> FindConceptAncestorsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string form = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindConceptAncestorsUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, form, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptChildren
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='form'>
            /// form. Possible values include: 'inferred', 'stated', 'additional'
            /// </param>
            /// <param name='includeDescendantCount'>
            /// includeDescendantCount
            /// </param>
            public static object FindConceptChildrenUsingGET(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string form = default(string), bool? includeDescendantCount = false)
            {
                return operations.FindConceptChildrenUsingGETAsync(branch, conceptId, acceptLanguage, form, includeDescendantCount).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptChildren
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='form'>
            /// form. Possible values include: 'inferred', 'stated', 'additional'
            /// </param>
            /// <param name='includeDescendantCount'>
            /// includeDescendantCount
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FindConceptChildrenUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string form = default(string), bool? includeDescendantCount = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindConceptChildrenUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, form, includeDescendantCount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findConceptChildren
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='form'>
            /// form. Possible values include: 'inferred', 'stated', 'additional'
            /// </param>
            /// <param name='includeDescendantCount'>
            /// includeDescendantCount
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> FindConceptChildrenUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string form = default(string), bool? includeDescendantCount = false, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindConceptChildrenUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, form, includeDescendantCount, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptParents
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='form'>
            /// form. Possible values include: 'inferred', 'stated', 'additional'
            /// </param>
            /// <param name='includeDescendantCount'>
            /// includeDescendantCount
            /// </param>
            public static object FindConceptParentsUsingGET(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string form = default(string), bool? includeDescendantCount = false)
            {
                return operations.FindConceptParentsUsingGETAsync(branch, conceptId, acceptLanguage, form, includeDescendantCount).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptParents
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='form'>
            /// form. Possible values include: 'inferred', 'stated', 'additional'
            /// </param>
            /// <param name='includeDescendantCount'>
            /// includeDescendantCount
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FindConceptParentsUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string form = default(string), bool? includeDescendantCount = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindConceptParentsUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, form, includeDescendantCount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findConceptParents
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='form'>
            /// form. Possible values include: 'inferred', 'stated', 'additional'
            /// </param>
            /// <param name='includeDescendantCount'>
            /// includeDescendantCount
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> FindConceptParentsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, string form = default(string), bool? includeDescendantCount = false, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindConceptParentsUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, form, includeDescendantCount, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for concept descriptions.
            /// </summary>
            /// <remarks>
            /// The Accept-Language header is used to specify the user's preferred
            /// language, 'en' is always added as a fallback if not already included in the
            /// list. Each language is used as an optional clause for matching and will
            /// include the correct character folding behaviour for that language. The
            /// Accept-Language header list is also used to chose the best translated FSN
            /// and PT values in the response.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='term'>
            /// term
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='module'>
            /// module
            /// </param>
            /// <param name='language'>
            /// Set of two character language codes to match. The English language code
            /// 'en' will not be added automatically, in contrast to the Accept-Language
            /// header which always includes it. Accept-Language header still controls
            /// result FSN and PT language selection.
            /// </param>
            /// <param name='type'>
            /// Set of description types to include. Pick descendants of
            /// '900000000000446008 | Description type (core metadata concept) |'.
            /// </param>
            /// <param name='semanticTag'>
            /// semanticTag
            /// </param>
            /// <param name='semanticTags'>
            /// Set of semantic tags.
            /// </param>
            /// <param name='preferredIn'>
            /// Set of description language reference sets. The description must be
            /// preferred in at least one of these to match.
            /// </param>
            /// <param name='acceptableIn'>
            /// Set of description language reference sets. The description must be
            /// acceptable in at least one of these to match.
            /// </param>
            /// <param name='preferredOrAcceptableIn'>
            /// Set of description language reference sets. The description must be
            /// preferred OR acceptable in at least one of these to match.
            /// </param>
            /// <param name='conceptActive'>
            /// conceptActive
            /// </param>
            /// <param name='conceptRefset'>
            /// conceptRefset
            /// </param>
            /// <param name='groupByConcept'>
            /// groupByConcept
            /// </param>
            /// <param name='searchMode'>
            /// searchMode. Possible values include: 'STANDARD', 'REGEX'
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            public static PageBrowserDescriptionSearchResult FindBrowserDescriptionsUsingGET(this ISnowstorm operations, string branch, string acceptLanguage, string term = default(string), bool? active = default(bool?), string module = default(string), IList<string> language = default(IList<string>), IList<long?> type = default(IList<long?>), string semanticTag = default(string), IList<string> semanticTags = default(IList<string>), IList<long?> preferredIn = default(IList<long?>), IList<long?> acceptableIn = default(IList<long?>), IList<long?> preferredOrAcceptableIn = default(IList<long?>), bool? conceptActive = default(bool?), string conceptRefset = default(string), bool? groupByConcept = false, string searchMode = default(string), int? offset = 0, int? limit = 50)
            {
                return operations.FindBrowserDescriptionsUsingGETAsync(branch, acceptLanguage, term, active, module, language, type, semanticTag, semanticTags, preferredIn, acceptableIn, preferredOrAcceptableIn, conceptActive, conceptRefset, groupByConcept, searchMode, offset, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for concept descriptions.
            /// </summary>
            /// <remarks>
            /// The Accept-Language header is used to specify the user's preferred
            /// language, 'en' is always added as a fallback if not already included in the
            /// list. Each language is used as an optional clause for matching and will
            /// include the correct character folding behaviour for that language. The
            /// Accept-Language header list is also used to chose the best translated FSN
            /// and PT values in the response.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='term'>
            /// term
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='module'>
            /// module
            /// </param>
            /// <param name='language'>
            /// Set of two character language codes to match. The English language code
            /// 'en' will not be added automatically, in contrast to the Accept-Language
            /// header which always includes it. Accept-Language header still controls
            /// result FSN and PT language selection.
            /// </param>
            /// <param name='type'>
            /// Set of description types to include. Pick descendants of
            /// '900000000000446008 | Description type (core metadata concept) |'.
            /// </param>
            /// <param name='semanticTag'>
            /// semanticTag
            /// </param>
            /// <param name='semanticTags'>
            /// Set of semantic tags.
            /// </param>
            /// <param name='preferredIn'>
            /// Set of description language reference sets. The description must be
            /// preferred in at least one of these to match.
            /// </param>
            /// <param name='acceptableIn'>
            /// Set of description language reference sets. The description must be
            /// acceptable in at least one of these to match.
            /// </param>
            /// <param name='preferredOrAcceptableIn'>
            /// Set of description language reference sets. The description must be
            /// preferred OR acceptable in at least one of these to match.
            /// </param>
            /// <param name='conceptActive'>
            /// conceptActive
            /// </param>
            /// <param name='conceptRefset'>
            /// conceptRefset
            /// </param>
            /// <param name='groupByConcept'>
            /// groupByConcept
            /// </param>
            /// <param name='searchMode'>
            /// searchMode. Possible values include: 'STANDARD', 'REGEX'
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PageBrowserDescriptionSearchResult> FindBrowserDescriptionsUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, string term = default(string), bool? active = default(bool?), string module = default(string), IList<string> language = default(IList<string>), IList<long?> type = default(IList<long?>), string semanticTag = default(string), IList<string> semanticTags = default(IList<string>), IList<long?> preferredIn = default(IList<long?>), IList<long?> acceptableIn = default(IList<long?>), IList<long?> preferredOrAcceptableIn = default(IList<long?>), bool? conceptActive = default(bool?), string conceptRefset = default(string), bool? groupByConcept = false, string searchMode = default(string), int? offset = 0, int? limit = 50, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindBrowserDescriptionsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, term, active, module, language, type, semanticTag, semanticTags, preferredIn, acceptableIn, preferredOrAcceptableIn, conceptActive, conceptRefset, groupByConcept, searchMode, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for concept descriptions.
            /// </summary>
            /// <remarks>
            /// The Accept-Language header is used to specify the user's preferred
            /// language, 'en' is always added as a fallback if not already included in the
            /// list. Each language is used as an optional clause for matching and will
            /// include the correct character folding behaviour for that language. The
            /// Accept-Language header list is also used to chose the best translated FSN
            /// and PT values in the response.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='term'>
            /// term
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='module'>
            /// module
            /// </param>
            /// <param name='language'>
            /// Set of two character language codes to match. The English language code
            /// 'en' will not be added automatically, in contrast to the Accept-Language
            /// header which always includes it. Accept-Language header still controls
            /// result FSN and PT language selection.
            /// </param>
            /// <param name='type'>
            /// Set of description types to include. Pick descendants of
            /// '900000000000446008 | Description type (core metadata concept) |'.
            /// </param>
            /// <param name='semanticTag'>
            /// semanticTag
            /// </param>
            /// <param name='semanticTags'>
            /// Set of semantic tags.
            /// </param>
            /// <param name='preferredIn'>
            /// Set of description language reference sets. The description must be
            /// preferred in at least one of these to match.
            /// </param>
            /// <param name='acceptableIn'>
            /// Set of description language reference sets. The description must be
            /// acceptable in at least one of these to match.
            /// </param>
            /// <param name='preferredOrAcceptableIn'>
            /// Set of description language reference sets. The description must be
            /// preferred OR acceptable in at least one of these to match.
            /// </param>
            /// <param name='conceptActive'>
            /// conceptActive
            /// </param>
            /// <param name='conceptRefset'>
            /// conceptRefset
            /// </param>
            /// <param name='groupByConcept'>
            /// groupByConcept
            /// </param>
            /// <param name='searchMode'>
            /// searchMode. Possible values include: 'STANDARD', 'REGEX'
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<PageBrowserDescriptionSearchResult> FindBrowserDescriptionsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, string term = default(string), bool? active = default(bool?), string module = default(string), IList<string> language = default(IList<string>), IList<long?> type = default(IList<long?>), string semanticTag = default(string), IList<string> semanticTags = default(IList<string>), IList<long?> preferredIn = default(IList<long?>), IList<long?> acceptableIn = default(IList<long?>), IList<long?> preferredOrAcceptableIn = default(IList<long?>), bool? conceptActive = default(bool?), string conceptRefset = default(string), bool? groupByConcept = false, string searchMode = default(string), int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindBrowserDescriptionsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, term, active, module, language, type, semanticTag, semanticTags, preferredIn, acceptableIn, preferredOrAcceptableIn, conceptActive, conceptRefset, groupByConcept, searchMode, offset, limit, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for reference set ids.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='referenceSet'>
            /// A reference set identifier or ECL expression can be used to limit the
            /// reference sets searched. Example: &lt;723564002
            /// </param>
            /// <param name='referencedComponentId'>
            /// referencedComponentId
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            public static RefSetMemberPageWithBucketAggregationsReferenceSetMember FindBrowserReferenceSetMembersWithAggregationsUsingGET(this ISnowstorm operations, string branch, string acceptLanguage, string referenceSet = default(string), string referencedComponentId = default(string), bool? active = default(bool?), int? offset = 0, int? limit = 10)
            {
                return operations.FindBrowserReferenceSetMembersWithAggregationsUsingGETAsync(branch, acceptLanguage, referenceSet, referencedComponentId, active, offset, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for reference set ids.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='referenceSet'>
            /// A reference set identifier or ECL expression can be used to limit the
            /// reference sets searched. Example: &lt;723564002
            /// </param>
            /// <param name='referencedComponentId'>
            /// referencedComponentId
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RefSetMemberPageWithBucketAggregationsReferenceSetMember> FindBrowserReferenceSetMembersWithAggregationsUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, string referenceSet = default(string), string referencedComponentId = default(string), bool? active = default(bool?), int? offset = 0, int? limit = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindBrowserReferenceSetMembersWithAggregationsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, referenceSet, referencedComponentId, active, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for reference set ids.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='referenceSet'>
            /// A reference set identifier or ECL expression can be used to limit the
            /// reference sets searched. Example: &lt;723564002
            /// </param>
            /// <param name='referencedComponentId'>
            /// referencedComponentId
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<RefSetMemberPageWithBucketAggregationsReferenceSetMember> FindBrowserReferenceSetMembersWithAggregationsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, string referenceSet = default(string), string referencedComponentId = default(string), bool? active = default(bool?), int? offset = 0, int? limit = 10, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindBrowserReferenceSetMembersWithAggregationsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, referenceSet, referencedComponentId, active, offset, limit, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all code systems
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ItemsPageCodeSystem FindAllUsingGET(this ISnowstorm operations)
            {
                return operations.FindAllUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all code systems
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageCodeSystem> FindAllUsingGETAsync(this ISnowstorm operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindAllUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all code systems
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageCodeSystem> FindAllUsingGETWithHttpMessages(this ISnowstorm operations, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindAllUsingGETWithHttpMessagesAsync(customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a code system
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shortName'>
            /// shortName
            /// </param>
            public static CodeSystem FindCodeSystemUsingGET(this ISnowstorm operations, string shortName)
            {
                return operations.FindCodeSystemUsingGETAsync(shortName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a code system
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shortName'>
            /// shortName
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CodeSystem> FindCodeSystemUsingGETAsync(this ISnowstorm operations, string shortName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindCodeSystemUsingGETWithHttpMessagesAsync(shortName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a code system
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shortName'>
            /// shortName
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<CodeSystem> FindCodeSystemUsingGETWithHttpMessages(this ISnowstorm operations, string shortName, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindCodeSystemUsingGETWithHttpMessagesAsync(shortName, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all code system versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shortName'>
            /// shortName
            /// </param>
            /// <param name='showFutureVersions'>
            /// showFutureVersions
            /// </param>
            public static ItemsPageCodeSystemVersion FindAllVersionsUsingGET(this ISnowstorm operations, string shortName, bool? showFutureVersions = default(bool?))
            {
                return operations.FindAllVersionsUsingGETAsync(shortName, showFutureVersions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all code system versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shortName'>
            /// shortName
            /// </param>
            /// <param name='showFutureVersions'>
            /// showFutureVersions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageCodeSystemVersion> FindAllVersionsUsingGETAsync(this ISnowstorm operations, string shortName, bool? showFutureVersions = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindAllVersionsUsingGETWithHttpMessagesAsync(shortName, showFutureVersions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all code system versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shortName'>
            /// shortName
            /// </param>
            /// <param name='showFutureVersions'>
            /// showFutureVersions
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageCodeSystemVersion> FindAllVersionsUsingGETWithHttpMessages(this ISnowstorm operations, string shortName, bool? showFutureVersions = default(bool?), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindAllVersionsUsingGETWithHttpMessagesAsync(shortName, showFutureVersions, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve valid values for the given attribute and term prefix.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='attributeId'>
            /// attributeId
            /// </param>
            /// <param name='termPrefix'>
            /// termPrefix
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='contentType'>
            /// contentType. Possible values include: 'PRECOORDINATED',
            /// 'NEW_PRECOORDINATED', 'POSTCOORDINATED', 'ALL'
            /// </param>
            public static ItemsPageConceptMini RetrieveAttributeValuesUsingGET(this ISnowstorm operations, string branch, string attributeId, string termPrefix, string acceptLanguage, string contentType = default(string))
            {
                return operations.RetrieveAttributeValuesUsingGETAsync(branch, attributeId, termPrefix, acceptLanguage, contentType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve valid values for the given attribute and term prefix.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='attributeId'>
            /// attributeId
            /// </param>
            /// <param name='termPrefix'>
            /// termPrefix
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='contentType'>
            /// contentType. Possible values include: 'PRECOORDINATED',
            /// 'NEW_PRECOORDINATED', 'POSTCOORDINATED', 'ALL'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageConceptMini> RetrieveAttributeValuesUsingGETAsync(this ISnowstorm operations, string branch, string attributeId, string termPrefix, string acceptLanguage, string contentType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveAttributeValuesUsingGETWithHttpMessagesAsync(branch, attributeId, termPrefix, acceptLanguage, contentType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve valid values for the given attribute and term prefix.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='attributeId'>
            /// attributeId
            /// </param>
            /// <param name='termPrefix'>
            /// termPrefix
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='contentType'>
            /// contentType. Possible values include: 'PRECOORDINATED',
            /// 'NEW_PRECOORDINATED', 'POSTCOORDINATED', 'ALL'
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageConceptMini> RetrieveAttributeValuesUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string attributeId, string termPrefix, string acceptLanguage, string contentType = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.RetrieveAttributeValuesUsingGETWithHttpMessagesAsync(branch, attributeId, termPrefix, acceptLanguage, contentType, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve MRCM domain attributes applicable for the given stated parents.
            /// </summary>
            /// <remarks>
            /// The parentIds must be the set ids of stated parents. If creating
            /// post-coordinated expressions be sure to set the content type to
            /// POSTCOORDINATED.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='parentIds'>
            /// parentIds
            /// </param>
            /// <param name='proximalPrimitiveModeling'>
            /// proximalPrimitiveModeling
            /// </param>
            /// <param name='contentType'>
            /// contentType. Possible values include: 'PRECOORDINATED',
            /// 'NEW_PRECOORDINATED', 'POSTCOORDINATED', 'ALL'
            /// </param>
            public static ItemsPageConceptMini RetrieveDomainAttributesUsingGET(this ISnowstorm operations, string branch, string acceptLanguage, IList<long?> parentIds = default(IList<long?>), bool? proximalPrimitiveModeling = true, string contentType = default(string))
            {
                return operations.RetrieveDomainAttributesUsingGETAsync(branch, acceptLanguage, parentIds, proximalPrimitiveModeling, contentType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve MRCM domain attributes applicable for the given stated parents.
            /// </summary>
            /// <remarks>
            /// The parentIds must be the set ids of stated parents. If creating
            /// post-coordinated expressions be sure to set the content type to
            /// POSTCOORDINATED.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='parentIds'>
            /// parentIds
            /// </param>
            /// <param name='proximalPrimitiveModeling'>
            /// proximalPrimitiveModeling
            /// </param>
            /// <param name='contentType'>
            /// contentType. Possible values include: 'PRECOORDINATED',
            /// 'NEW_PRECOORDINATED', 'POSTCOORDINATED', 'ALL'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageConceptMini> RetrieveDomainAttributesUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, IList<long?> parentIds = default(IList<long?>), bool? proximalPrimitiveModeling = true, string contentType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveDomainAttributesUsingGETWithHttpMessagesAsync(branch, acceptLanguage, parentIds, proximalPrimitiveModeling, contentType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve MRCM domain attributes applicable for the given stated parents.
            /// </summary>
            /// <remarks>
            /// The parentIds must be the set ids of stated parents. If creating
            /// post-coordinated expressions be sure to set the content type to
            /// POSTCOORDINATED.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='parentIds'>
            /// parentIds
            /// </param>
            /// <param name='proximalPrimitiveModeling'>
            /// proximalPrimitiveModeling
            /// </param>
            /// <param name='contentType'>
            /// contentType. Possible values include: 'PRECOORDINATED',
            /// 'NEW_PRECOORDINATED', 'POSTCOORDINATED', 'ALL'
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageConceptMini> RetrieveDomainAttributesUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, IList<long?> parentIds = default(IList<long?>), bool? proximalPrimitiveModeling = true, string contentType = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.RetrieveDomainAttributesUsingGETWithHttpMessagesAsync(branch, acceptLanguage, parentIds, proximalPrimitiveModeling, contentType, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Software build version and timestamp.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BuildVersion GetBuildInformationUsingGET(this ISnowstorm operations)
            {
                return operations.GetBuildInformationUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Software build version and timestamp.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BuildVersion> GetBuildInformationUsingGETAsync(this ISnowstorm operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBuildInformationUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Software build version and timestamp.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<BuildVersion> GetBuildInformationUsingGETWithHttpMessages(this ISnowstorm operations, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetBuildInformationUsingGETWithHttpMessagesAsync(customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculate statistics for unreleased/unversioned content to be used in daily
            /// build browser.
            /// </summary>
            /// <remarks>
            /// Does not work on versioned content.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            public static AuthoringStatsSummary GetStatsUsingGET(this ISnowstorm operations, string branch)
            {
                return operations.GetStatsUsingGETAsync(branch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculate statistics for unreleased/unversioned content to be used in daily
            /// build browser.
            /// </summary>
            /// <remarks>
            /// Does not work on versioned content.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthoringStatsSummary> GetStatsUsingGETAsync(this ISnowstorm operations, string branch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatsUsingGETWithHttpMessagesAsync(branch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Calculate statistics for unreleased/unversioned content to be used in daily
            /// build browser.
            /// </summary>
            /// <remarks>
            /// Does not work on versioned content.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<AuthoringStatsSummary> GetStatsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetStatsUsingGETWithHttpMessagesAsync(branch, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getChangedFSNs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<ConceptMicro> GetChangedFSNsUsingGET(this ISnowstorm operations, string branch, string acceptLanguage)
            {
                return operations.GetChangedFSNsUsingGETAsync(branch, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getChangedFSNs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConceptMicro>> GetChangedFSNsUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChangedFSNsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getChangedFSNs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<ConceptMicro>> GetChangedFSNsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetChangedFSNsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getInactivatedConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<ConceptMicro> GetInactivatedConceptsUsingGET(this ISnowstorm operations, string branch, string acceptLanguage)
            {
                return operations.GetInactivatedConceptsUsingGETAsync(branch, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getInactivatedConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConceptMicro>> GetInactivatedConceptsUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInactivatedConceptsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getInactivatedConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<ConceptMicro>> GetInactivatedConceptsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetInactivatedConceptsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getInactivatedSynonyms
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            public static IList<ConceptMicro> GetInactivatedSynonymsUsingGET(this ISnowstorm operations, string branch)
            {
                return operations.GetInactivatedSynonymsUsingGETAsync(branch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getInactivatedSynonyms
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConceptMicro>> GetInactivatedSynonymsUsingGETAsync(this ISnowstorm operations, string branch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInactivatedSynonymsUsingGETWithHttpMessagesAsync(branch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getInactivatedSynonyms
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<ConceptMicro>> GetInactivatedSynonymsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetInactivatedSynonymsUsingGETWithHttpMessagesAsync(branch, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getNewConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<ConceptMicro> GetNewConceptsUsingGET(this ISnowstorm operations, string branch, string acceptLanguage)
            {
                return operations.GetNewConceptsUsingGETAsync(branch, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getNewConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConceptMicro>> GetNewConceptsUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNewConceptsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getNewConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<ConceptMicro>> GetNewConceptsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetNewConceptsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getNewSynonymsOnExistingConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            public static IList<ConceptMicro> GetNewSynonymsOnExistingConceptsUsingGET(this ISnowstorm operations, string branch)
            {
                return operations.GetNewSynonymsOnExistingConceptsUsingGETAsync(branch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getNewSynonymsOnExistingConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConceptMicro>> GetNewSynonymsOnExistingConceptsUsingGETAsync(this ISnowstorm operations, string branch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNewSynonymsOnExistingConceptsUsingGETWithHttpMessagesAsync(branch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getNewSynonymsOnExistingConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<ConceptMicro>> GetNewSynonymsOnExistingConceptsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetNewSynonymsOnExistingConceptsUsingGETWithHttpMessagesAsync(branch, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getReactivatedConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static IList<ConceptMicro> GetReactivatedConceptsUsingGET(this ISnowstorm operations, string branch, string acceptLanguage)
            {
                return operations.GetReactivatedConceptsUsingGETAsync(branch, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getReactivatedConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConceptMicro>> GetReactivatedConceptsUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReactivatedConceptsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getReactivatedConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<ConceptMicro>> GetReactivatedConceptsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetReactivatedConceptsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getReactivatedSynonyms
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            public static IList<ConceptMicro> GetReactivatedSynonymsUsingGET(this ISnowstorm operations, string branch)
            {
                return operations.GetReactivatedSynonymsUsingGETAsync(branch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getReactivatedSynonyms
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConceptMicro>> GetReactivatedSynonymsUsingGETAsync(this ISnowstorm operations, string branch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReactivatedSynonymsUsingGETWithHttpMessagesAsync(branch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getReactivatedSynonyms
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<ConceptMicro>> GetReactivatedSynonymsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetReactivatedSynonymsUsingGETWithHttpMessagesAsync(branch, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='activeFilter'>
            /// activeFilter
            /// </param>
            /// <param name='definitionStatusFilter'>
            /// definitionStatusFilter
            /// </param>
            /// <param name='term'>
            /// term
            /// </param>
            /// <param name='termActive'>
            /// termActive
            /// </param>
            /// <param name='language'>
            /// Set of two character language codes to match. The English language code
            /// 'en' will not be added automatically, in contrast to the Accept-Language
            /// header which always includes it. Accept-Language header still controls
            /// result FSN and PT language selection.
            /// </param>
            /// <param name='preferredIn'>
            /// Set of description language reference sets. The description must be
            /// preferred in at least one of these to match.
            /// </param>
            /// <param name='acceptableIn'>
            /// Set of description language reference sets. The description must be
            /// acceptable in at least one of these to match.
            /// </param>
            /// <param name='preferredOrAcceptableIn'>
            /// Set of description language reference sets. The description must be
            /// preferred OR acceptable in at least one of these to match.
            /// </param>
            /// <param name='ecl'>
            /// ecl
            /// </param>
            /// <param name='statedEcl'>
            /// statedEcl
            /// </param>
            /// <param name='conceptIds'>
            /// conceptIds
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='searchAfter'>
            /// searchAfter
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language header can take the format en-x-900000000000508004 which
            /// sets the language reference set to use in the results.
            /// </param>
            public static ItemsPageConceptMini FindConceptsUsingGETMethod(this ISnowstorm operations, string branch, bool? activeFilter = default(bool?), string definitionStatusFilter = default(string), string term = default(string), bool? termActive = default(bool?), IList<string> language = default(IList<string>), IList<long?> preferredIn = default(IList<long?>), IList<long?> acceptableIn = default(IList<long?>), IList<long?> preferredOrAcceptableIn = default(IList<long?>), string ecl = default(string), string statedEcl = default(string), IList<string> conceptIds = default(IList<string>), int? offset = 0, int? limit = 50, string searchAfter = default(string), string acceptLanguage = "en")
            {
                return operations.FindConceptsUsingGETMethodAsync(branch, activeFilter, definitionStatusFilter, term, termActive, language, preferredIn, acceptableIn, preferredOrAcceptableIn, ecl, statedEcl, conceptIds, offset, limit, searchAfter, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='activeFilter'>
            /// activeFilter
            /// </param>
            /// <param name='definitionStatusFilter'>
            /// definitionStatusFilter
            /// </param>
            /// <param name='term'>
            /// term
            /// </param>
            /// <param name='termActive'>
            /// termActive
            /// </param>
            /// <param name='language'>
            /// Set of two character language codes to match. The English language code
            /// 'en' will not be added automatically, in contrast to the Accept-Language
            /// header which always includes it. Accept-Language header still controls
            /// result FSN and PT language selection.
            /// </param>
            /// <param name='preferredIn'>
            /// Set of description language reference sets. The description must be
            /// preferred in at least one of these to match.
            /// </param>
            /// <param name='acceptableIn'>
            /// Set of description language reference sets. The description must be
            /// acceptable in at least one of these to match.
            /// </param>
            /// <param name='preferredOrAcceptableIn'>
            /// Set of description language reference sets. The description must be
            /// preferred OR acceptable in at least one of these to match.
            /// </param>
            /// <param name='ecl'>
            /// ecl
            /// </param>
            /// <param name='statedEcl'>
            /// statedEcl
            /// </param>
            /// <param name='conceptIds'>
            /// conceptIds
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='searchAfter'>
            /// searchAfter
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language header can take the format en-x-900000000000508004 which
            /// sets the language reference set to use in the results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageConceptMini> FindConceptsUsingGETMethodAsync(this ISnowstorm operations, string branch, bool? activeFilter = default(bool?), string definitionStatusFilter = default(string), string term = default(string), bool? termActive = default(bool?), IList<string> language = default(IList<string>), IList<long?> preferredIn = default(IList<long?>), IList<long?> acceptableIn = default(IList<long?>), IList<long?> preferredOrAcceptableIn = default(IList<long?>), string ecl = default(string), string statedEcl = default(string), IList<string> conceptIds = default(IList<string>), int? offset = 0, int? limit = 50, string searchAfter = default(string), string acceptLanguage = "en", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindConceptsUsingGETMethodWithHttpMessagesAsync(branch, activeFilter, definitionStatusFilter, term, termActive, language, preferredIn, acceptableIn, preferredOrAcceptableIn, ecl, statedEcl, conceptIds, offset, limit, searchAfter, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findConcepts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='activeFilter'>
            /// activeFilter
            /// </param>
            /// <param name='definitionStatusFilter'>
            /// definitionStatusFilter
            /// </param>
            /// <param name='term'>
            /// term
            /// </param>
            /// <param name='termActive'>
            /// termActive
            /// </param>
            /// <param name='language'>
            /// Set of two character language codes to match. The English language code
            /// 'en' will not be added automatically, in contrast to the Accept-Language
            /// header which always includes it. Accept-Language header still controls
            /// result FSN and PT language selection.
            /// </param>
            /// <param name='preferredIn'>
            /// Set of description language reference sets. The description must be
            /// preferred in at least one of these to match.
            /// </param>
            /// <param name='acceptableIn'>
            /// Set of description language reference sets. The description must be
            /// acceptable in at least one of these to match.
            /// </param>
            /// <param name='preferredOrAcceptableIn'>
            /// Set of description language reference sets. The description must be
            /// preferred OR acceptable in at least one of these to match.
            /// </param>
            /// <param name='ecl'>
            /// ecl
            /// </param>
            /// <param name='statedEcl'>
            /// statedEcl
            /// </param>
            /// <param name='conceptIds'>
            /// conceptIds
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='searchAfter'>
            /// searchAfter
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language header can take the format en-x-900000000000508004 which
            /// sets the language reference set to use in the results.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageConceptMini> FindConceptsUsingGETMethodWithHttpMessages(this ISnowstorm operations, string branch, bool? activeFilter = default(bool?), string definitionStatusFilter = default(string), string term = default(string), bool? termActive = default(bool?), IList<string> language = default(IList<string>), IList<long?> preferredIn = default(IList<long?>), IList<long?> acceptableIn = default(IList<long?>), IList<long?> preferredOrAcceptableIn = default(IList<long?>), string ecl = default(string), string statedEcl = default(string), IList<string> conceptIds = default(IList<string>), int? offset = 0, int? limit = 50, string searchAfter = default(string), string acceptLanguage = "en", Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindConceptsUsingGETMethodWithHttpMessagesAsync(branch, activeFilter, definitionStatusFilter, term, termActive, language, preferredIn, acceptableIn, preferredOrAcceptableIn, ecl, statedEcl, conceptIds, offset, limit, searchAfter, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConcept
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static ConceptMini FindConceptUsingGET(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage)
            {
                return operations.FindConceptUsingGETAsync(branch, conceptId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConcept
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConceptMini> FindConceptUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindConceptUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findConcept
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ConceptMini> FindConceptUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindConceptUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getConceptAuthoringForm
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static Expression GetConceptAuthoringFormUsingGET(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage)
            {
                return operations.GetConceptAuthoringFormUsingGETAsync(branch, conceptId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getConceptAuthoringForm
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Expression> GetConceptAuthoringFormUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConceptAuthoringFormUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getConceptAuthoringForm
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Expression> GetConceptAuthoringFormUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetConceptAuthoringFormUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptDescendants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='stated'>
            /// stated
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            public static ItemsPageConceptMini FindConceptDescendantsUsingGET(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, bool? stated = false, int? offset = 0, int? limit = 50)
            {
                return operations.FindConceptDescendantsUsingGETAsync(branch, conceptId, acceptLanguage, stated, offset, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptDescendants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='stated'>
            /// stated
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageConceptMini> FindConceptDescendantsUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, bool? stated = false, int? offset = 0, int? limit = 50, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindConceptDescendantsUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, stated, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findConceptDescendants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='stated'>
            /// stated
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageConceptMini> FindConceptDescendantsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, bool? stated = false, int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindConceptDescendantsUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, stated, offset, limit, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptDescriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static ConceptDescriptionsResult FindConceptDescriptionsUsingGET(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage)
            {
                return operations.FindConceptDescriptionsUsingGETAsync(branch, conceptId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptDescriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConceptDescriptionsResult> FindConceptDescriptionsUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindConceptDescriptionsUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findConceptDescriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ConceptDescriptionsResult> FindConceptDescriptionsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindConceptDescriptionsUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptInboundRelationships
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            public static InboundRelationshipsResult FindConceptInboundRelationshipsUsingGET(this ISnowstorm operations, string branch, string conceptId)
            {
                return operations.FindConceptInboundRelationshipsUsingGETAsync(branch, conceptId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findConceptInboundRelationships
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InboundRelationshipsResult> FindConceptInboundRelationshipsUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindConceptInboundRelationshipsUsingGETWithHttpMessagesAsync(branch, conceptId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findConceptInboundRelationships
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<InboundRelationshipsResult> FindConceptInboundRelationshipsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindConceptInboundRelationshipsUsingGETWithHttpMessagesAsync(branch, conceptId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getConceptNormalForm
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='statedView'>
            /// statedView
            /// </param>
            /// <param name='includeTerms'>
            /// includeTerms
            /// </param>
            public static ExpressionStringPojo GetConceptNormalFormUsingGET(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, bool? statedView = false, bool? includeTerms = false)
            {
                return operations.GetConceptNormalFormUsingGETAsync(branch, conceptId, acceptLanguage, statedView, includeTerms).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getConceptNormalForm
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='statedView'>
            /// statedView
            /// </param>
            /// <param name='includeTerms'>
            /// includeTerms
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpressionStringPojo> GetConceptNormalFormUsingGETAsync(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, bool? statedView = false, bool? includeTerms = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConceptNormalFormUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, statedView, includeTerms, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getConceptNormalForm
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='statedView'>
            /// statedView
            /// </param>
            /// <param name='includeTerms'>
            /// includeTerms
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ExpressionStringPojo> GetConceptNormalFormUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptId, string acceptLanguage, bool? statedView = false, bool? includeTerms = false, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetConceptNormalFormUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, statedView, includeTerms, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find concepts which reference this concept in the inferred or stated form
            /// (including stated axioms).
            /// </summary>
            /// <remarks>
            /// Pagination works on the referencing concepts. A referencing concept may
            /// have one or more references of different types.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='stated'>
            /// stated
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            public static ConceptReferencesResult FindConceptReferencesUsingGET(this ISnowstorm operations, string branch, long conceptId, string acceptLanguage, bool? stated = false, int? offset = 0, int? limit = 1000)
            {
                return operations.FindConceptReferencesUsingGETAsync(branch, conceptId, acceptLanguage, stated, offset, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find concepts which reference this concept in the inferred or stated form
            /// (including stated axioms).
            /// </summary>
            /// <remarks>
            /// Pagination works on the referencing concepts. A referencing concept may
            /// have one or more references of different types.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='stated'>
            /// stated
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConceptReferencesResult> FindConceptReferencesUsingGETAsync(this ISnowstorm operations, string branch, long conceptId, string acceptLanguage, bool? stated = false, int? offset = 0, int? limit = 1000, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindConceptReferencesUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, stated, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find concepts which reference this concept in the inferred or stated form
            /// (including stated axioms).
            /// </summary>
            /// <remarks>
            /// Pagination works on the referencing concepts. A referencing concept may
            /// have one or more references of different types.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptId'>
            /// conceptId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='stated'>
            /// stated
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ConceptReferencesResult> FindConceptReferencesUsingGETWithHttpMessages(this ISnowstorm operations, string branch, long conceptId, string acceptLanguage, bool? stated = false, int? offset = 0, int? limit = 1000, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindConceptReferencesUsingGETWithHttpMessagesAsync(branch, conceptId, acceptLanguage, stated, offset, limit, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findDescriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='concept'>
            /// The concept id to match
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            public static ItemsPageDescription FindDescriptionsUsingGETMethod(this ISnowstorm operations, string branch, string concept = default(string), int? offset = 0, int? limit = 50)
            {
                return operations.FindDescriptionsUsingGETMethodAsync(branch, concept, offset, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findDescriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='concept'>
            /// The concept id to match
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageDescription> FindDescriptionsUsingGETMethodAsync(this ISnowstorm operations, string branch, string concept = default(string), int? offset = 0, int? limit = 50, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindDescriptionsUsingGETMethodWithHttpMessagesAsync(branch, concept, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findDescriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='concept'>
            /// The concept id to match
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageDescription> FindDescriptionsUsingGETMethodWithHttpMessages(this ISnowstorm operations, string branch, string concept = default(string), int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindDescriptionsUsingGETMethodWithHttpMessagesAsync(branch, concept, offset, limit, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List semantic tags of all active concepts together with a count of concepts
            /// using each.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            public static IDictionary<string, long?> CountSemanticTagsUsingGET(this ISnowstorm operations, string branch)
            {
                return operations.CountSemanticTagsUsingGETAsync(branch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List semantic tags of all active concepts together with a count of concepts
            /// using each.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, long?>> CountSemanticTagsUsingGETAsync(this ISnowstorm operations, string branch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CountSemanticTagsUsingGETWithHttpMessagesAsync(branch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List semantic tags of all active concepts together with a count of concepts
            /// using each.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IDictionary<string, long?>> CountSemanticTagsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.CountSemanticTagsUsingGETWithHttpMessagesAsync(branch, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// fetchDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='descriptionId'>
            /// descriptionId
            /// </param>
            public static Description FetchDescriptionUsingGET(this ISnowstorm operations, string branch, string descriptionId)
            {
                return operations.FetchDescriptionUsingGETAsync(branch, descriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// fetchDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='descriptionId'>
            /// descriptionId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Description> FetchDescriptionUsingGETAsync(this ISnowstorm operations, string branch, string descriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FetchDescriptionUsingGETWithHttpMessagesAsync(branch, descriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// fetchDescription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='descriptionId'>
            /// descriptionId
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Description> FetchDescriptionUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string descriptionId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FetchDescriptionUsingGETWithHttpMessagesAsync(branch, descriptionId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for reference set members.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='referenceSet'>
            /// A reference set identifier or ECL expression can be used to limit the
            /// reference sets searched. Example: &lt;723564002
            /// </param>
            /// <param name='referencedComponentId'>
            /// referencedComponentId
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='targetComponent'>
            /// targetComponent
            /// </param>
            /// <param name='mapTarget'>
            /// mapTarget
            /// </param>
            /// <param name='owlExpressionconceptId'>
            /// Search by concept identifiers within an owlExpression.
            /// </param>
            /// <param name='owlExpressiongci'>
            /// Return axiom members with a GCI owlExpression.
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            public static ItemsPageReferenceSetMember FindRefsetMembersUsingGET(this ISnowstorm operations, string branch, string acceptLanguage, string referenceSet = default(string), string referencedComponentId = default(string), bool? active = default(bool?), string targetComponent = default(string), string mapTarget = default(string), string owlExpressionconceptId = default(string), bool? owlExpressiongci = default(bool?), int? offset = 0, int? limit = 50)
            {
                return operations.FindRefsetMembersUsingGETAsync(branch, acceptLanguage, referenceSet, referencedComponentId, active, targetComponent, mapTarget, owlExpressionconceptId, owlExpressiongci, offset, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for reference set members.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='referenceSet'>
            /// A reference set identifier or ECL expression can be used to limit the
            /// reference sets searched. Example: &lt;723564002
            /// </param>
            /// <param name='referencedComponentId'>
            /// referencedComponentId
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='targetComponent'>
            /// targetComponent
            /// </param>
            /// <param name='mapTarget'>
            /// mapTarget
            /// </param>
            /// <param name='owlExpressionconceptId'>
            /// Search by concept identifiers within an owlExpression.
            /// </param>
            /// <param name='owlExpressiongci'>
            /// Return axiom members with a GCI owlExpression.
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageReferenceSetMember> FindRefsetMembersUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, string referenceSet = default(string), string referencedComponentId = default(string), bool? active = default(bool?), string targetComponent = default(string), string mapTarget = default(string), string owlExpressionconceptId = default(string), bool? owlExpressiongci = default(bool?), int? offset = 0, int? limit = 50, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindRefsetMembersUsingGETWithHttpMessagesAsync(branch, acceptLanguage, referenceSet, referencedComponentId, active, targetComponent, mapTarget, owlExpressionconceptId, owlExpressiongci, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for reference set members.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='referenceSet'>
            /// A reference set identifier or ECL expression can be used to limit the
            /// reference sets searched. Example: &lt;723564002
            /// </param>
            /// <param name='referencedComponentId'>
            /// referencedComponentId
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='targetComponent'>
            /// targetComponent
            /// </param>
            /// <param name='mapTarget'>
            /// mapTarget
            /// </param>
            /// <param name='owlExpressionconceptId'>
            /// Search by concept identifiers within an owlExpression.
            /// </param>
            /// <param name='owlExpressiongci'>
            /// Return axiom members with a GCI owlExpression.
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageReferenceSetMember> FindRefsetMembersUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, string referenceSet = default(string), string referencedComponentId = default(string), bool? active = default(bool?), string targetComponent = default(string), string mapTarget = default(string), string owlExpressionconceptId = default(string), bool? owlExpressiongci = default(bool?), int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindRefsetMembersUsingGETWithHttpMessagesAsync(branch, acceptLanguage, referenceSet, referencedComponentId, active, targetComponent, mapTarget, owlExpressionconceptId, owlExpressiongci, offset, limit, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// fetchMember
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='uuid'>
            /// uuid
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static ReferenceSetMember FetchMemberUsingGET(this ISnowstorm operations, string branch, string uuid, string acceptLanguage)
            {
                return operations.FetchMemberUsingGETAsync(branch, uuid, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// fetchMember
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='uuid'>
            /// uuid
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSetMember> FetchMemberUsingGETAsync(this ISnowstorm operations, string branch, string uuid, string acceptLanguage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FetchMemberUsingGETWithHttpMessagesAsync(branch, uuid, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// fetchMember
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='uuid'>
            /// uuid
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ReferenceSetMember> FetchMemberUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string uuid, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FetchMemberUsingGETWithHttpMessagesAsync(branch, uuid, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findRelationships
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='module'>
            /// module
            /// </param>
            /// <param name='effectiveTime'>
            /// effectiveTime
            /// </param>
            /// <param name='source'>
            /// source
            /// </param>
            /// <param name='type'>
            /// type
            /// </param>
            /// <param name='destination'>
            /// destination
            /// </param>
            /// <param name='characteristicType'>
            /// characteristicType. Possible values include: 'STATED_RELATIONSHIP',
            /// 'INFERRED_RELATIONSHIP', 'ADDITIONAL_RELATIONSHIP'
            /// </param>
            /// <param name='group'>
            /// group
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            public static ItemsPageRelationship FindRelationshipsUsingGET(this ISnowstorm operations, string branch, string acceptLanguage, bool? active = default(bool?), string module = default(string), string effectiveTime = default(string), string source = default(string), string type = default(string), string destination = default(string), string characteristicType = default(string), int? group = default(int?), int? offset = 0, int? limit = 50)
            {
                return operations.FindRelationshipsUsingGETAsync(branch, acceptLanguage, active, module, effectiveTime, source, type, destination, characteristicType, group, offset, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findRelationships
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='module'>
            /// module
            /// </param>
            /// <param name='effectiveTime'>
            /// effectiveTime
            /// </param>
            /// <param name='source'>
            /// source
            /// </param>
            /// <param name='type'>
            /// type
            /// </param>
            /// <param name='destination'>
            /// destination
            /// </param>
            /// <param name='characteristicType'>
            /// characteristicType. Possible values include: 'STATED_RELATIONSHIP',
            /// 'INFERRED_RELATIONSHIP', 'ADDITIONAL_RELATIONSHIP'
            /// </param>
            /// <param name='group'>
            /// group
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemsPageRelationship> FindRelationshipsUsingGETAsync(this ISnowstorm operations, string branch, string acceptLanguage, bool? active = default(bool?), string module = default(string), string effectiveTime = default(string), string source = default(string), string type = default(string), string destination = default(string), string characteristicType = default(string), int? group = default(int?), int? offset = 0, int? limit = 50, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindRelationshipsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, active, module, effectiveTime, source, type, destination, characteristicType, group, offset, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// findRelationships
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='active'>
            /// active
            /// </param>
            /// <param name='module'>
            /// module
            /// </param>
            /// <param name='effectiveTime'>
            /// effectiveTime
            /// </param>
            /// <param name='source'>
            /// source
            /// </param>
            /// <param name='type'>
            /// type
            /// </param>
            /// <param name='destination'>
            /// destination
            /// </param>
            /// <param name='characteristicType'>
            /// characteristicType. Possible values include: 'STATED_RELATIONSHIP',
            /// 'INFERRED_RELATIONSHIP', 'ADDITIONAL_RELATIONSHIP'
            /// </param>
            /// <param name='group'>
            /// group
            /// </param>
            /// <param name='offset'>
            /// offset
            /// </param>
            /// <param name='limit'>
            /// limit
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ItemsPageRelationship> FindRelationshipsUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string acceptLanguage, bool? active = default(bool?), string module = default(string), string effectiveTime = default(string), string source = default(string), string type = default(string), string destination = default(string), string characteristicType = default(string), int? group = default(int?), int? offset = 0, int? limit = 50, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindRelationshipsUsingGETWithHttpMessagesAsync(branch, acceptLanguage, active, module, effectiveTime, source, type, destination, characteristicType, group, offset, limit, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// fetchRelationship
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='relationshipId'>
            /// relationshipId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            public static Relationship FetchRelationshipUsingGET(this ISnowstorm operations, string branch, string relationshipId, string acceptLanguage)
            {
                return operations.FetchRelationshipUsingGETAsync(branch, relationshipId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// fetchRelationship
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='relationshipId'>
            /// relationshipId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Relationship> FetchRelationshipUsingGETAsync(this ISnowstorm operations, string branch, string relationshipId, string acceptLanguage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FetchRelationshipUsingGETWithHttpMessagesAsync(branch, relationshipId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// fetchRelationship
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='relationshipId'>
            /// relationshipId
            /// </param>
            /// <param name='acceptLanguage'>
            /// Accept-Language
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<Relationship> FetchRelationshipUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string relationshipId, string acceptLanguage, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FetchRelationshipUsingGETWithHttpMessagesAsync(branch, relationshipId, acceptLanguage, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find inactive concepts with no historical association grouped by
            /// inactivation type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptEffectiveTime'>
            /// conceptEffectiveTime
            /// </param>
            public static IList<InactivationTypeAndConceptIdList> FindInactiveConceptsWithNoHistoricalAssociationByInactivationTypeUsingGET(this ISnowstorm operations, string branch, string conceptEffectiveTime = default(string))
            {
                return operations.FindInactiveConceptsWithNoHistoricalAssociationByInactivationTypeUsingGETAsync(branch, conceptEffectiveTime).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find inactive concepts with no historical association grouped by
            /// inactivation type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptEffectiveTime'>
            /// conceptEffectiveTime
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<InactivationTypeAndConceptIdList>> FindInactiveConceptsWithNoHistoricalAssociationByInactivationTypeUsingGETAsync(this ISnowstorm operations, string branch, string conceptEffectiveTime = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindInactiveConceptsWithNoHistoricalAssociationByInactivationTypeUsingGETWithHttpMessagesAsync(branch, conceptEffectiveTime, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find inactive concepts with no historical association grouped by
            /// inactivation type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// branch
            /// </param>
            /// <param name='conceptEffectiveTime'>
            /// conceptEffectiveTime
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<InactivationTypeAndConceptIdList>> FindInactiveConceptsWithNoHistoricalAssociationByInactivationTypeUsingGETWithHttpMessages(this ISnowstorm operations, string branch, string conceptEffectiveTime = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.FindInactiveConceptsWithNoHistoricalAssociationByInactivationTypeUsingGETWithHttpMessagesAsync(branch, conceptEffectiveTime, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
